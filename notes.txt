Why Use Rust?

Rust is a statically and strongly typed systems programming language. statically means that all types are known at compile-time, strongly means that these types are designed to make it harder to write incorrect programs.

The big difference from C and C++ is that Rust is safe by default; all memory accesses are checked. It is not possible to corrupt memory by accident.

The unifying principles behind Rust are:

strictly enforcing safe borrowing of data
functions, methods and closures to operate on data
tuples, structs and enums to aggregate data
pattern matching to select and destructure data
traits to define behaviour on data

=-Setup-=

First you need to install rust it is ideal to have homebrew installed to tun the brew, to do this open the terminal and run the following commands

in the terminal run the following : brew install rustup

After you run this command you can install the compiler and package manager

rustup-init

**When you run this command select option 1***

To verify the installation run the command: rustc —-version

To enable use of rust in vscode we have to use the RLS (rust language server)

download the rust extension this will contain the RLS

you then need to check if you have cargo which is rusts package manager

cargo --version

=-First Project-=

Using rusts package manager we will create a simple hello world Project

to do this cd into the desired folder and run 

cargo new [project_name]

A folder and a file called main.rs should be created 

to run a rust project you must use the following commands **In the folder where the project is**

cargo build
cargo run

=-Anatomy of a rust program-=
fn main() is the first code that runs in every rust program

Important details in hello_world program

1.Rust style is to indent with four spaces, not a tab.
2.using a ! means that you’re calling a macro instead of a normal function.
3.you see the "Hello, world!" string. We pass this string as an argument to println!
4.we end the line with a semicolon (;), which indicates that this expression is over and the next one is ready to begin.

***Compiling and Running Are Separate Steps***

Before running a Rust program, you must compile it using the Rust compiler by entering the rustc command and passing it the name of your source file, like this:

rustc main.rs

if you use ls in the direftory your in you will see 2 files main an main.rs
main is the executable file where main.rs is the file where the source code lies 


=-Cargo-=

Cargo is Rust’s build system and package manager. it hanldes building your code downloading libraries and building them (dependencies)

-Cargo.toml-

This file is in the TOML format which is Cargo’s configuration format.

1. The first line, [package], is a section heading that indicates that the following statements are configuring a package. As we add more information to this file, we’ll add other sections.
2.The next four lines set the configuration information Cargo needs to compile your program: the name, the version, who wrote it, and the edition of Rust to use. Cargo gets your name and email information from your environment, so if that information is not correct, fix the information now and then save the file. 
3.The last line, [dependencies], is the start of a section for you to list any of your project’s dependencies. In Rust, packages of code are referred to as crates. 

**Cargo expects your source files to live inside the src directory. **

The top-level project directory is just for README files, license information, configuration files, and anything else not related to your code.

Running cargo build for the first time also causes Cargo to create a new file at the top level: Cargo.lock. This file keeps track of the exact versions of dependencies in your project

Cargo also provides a command called cargo check. This command quickly checks your code to make sure it compiles but doesn’t produce an executable:

 cargo check is much faster than cargo build, because it skips the step of producing an executable. 


=-Guessing Game-=

set up a new project using the cargo new commands

The first part of the guessing game program will ask for user input, process that input, and check that the input is in the expected form.

std - standard library
io - input/output library

By default, Rust brings only a few types into the scope of every program in the prelude. If a type you want to use isn’t in the prelude, you have to bring that type into scope explicitly with a use statement

-storing values with variables-

let mut guess = String::new(); - is a let statemnet which is used to create a variable

In Rust, variables are immutable by default. mut makes variables mutable 

let foo = 5; // immutable
let mut bar = 5; // mutable

String::new() - is a function that returns a new instance of a String.

The :: syntax in the ::new line indicates that new is an associated function of the String type. An associated function is implemented on a type,

in this case String, rather than on a particular instance of a String. Some languages call this a ***static method***.

This new function creates a new, empty string. You’ll find a new function on many types, because it’s a common name for a function that makes a new value of some kind.

The next part of the code, .read_line(&mut guess), calls the read_line method on the standard input handle to get input from the user. We’re also passing one argument to read_line: &mut guess.

The job of read_line is to take whatever the user types into standard input and place that into a string, so it takes that string as an argument. The ***string argument needs to be mutable*** so the method can change the string’s content by adding the user input. this is why we state "&mut guess" rather than &guess

 & indicates that this argument is a reference,

 -handling errors-

 read_line returns a value io::Result. Rust has a number of types named Result in its standard library: a generic Result as well as specific versions for submodules, such as io::Result.

 The Result types are enumerations, often referred to as enums. An enumeration is a type that can have a fixed set of values, and those values are called the enum’s variants. 

 For Result, the variants are Ok or Err. The Ok variant indicates the operation was successful, and inside Ok is the successfully generated value. The Err variant means the operation failed, and Err contains information about how or why the operation failed.

An instance of io::Result has an expect method that you can call. If this instance of io::Result is an Err value, expect will cause the program to crash and display the message that you passed as an argument to expect. If the read_line method returns an Err


If this instance of io::Result is an Ok value, expect will take the return value that Ok is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in what the user entered into standard input.

If you don’t call expect, the program will compile, but you’ll get a warning telling you that you need to handle that shit.

-Prinitng Vlaues with Println! placeholder-

This line prints the string we saved the user’s input in. The set of curly brackets, {}, is a placeholder: think of {} as little crab pincers that hold a value in place. You can print more than one value using curly brackets: the first set of curly brackets holds the first value listed after the format string, the second set holds the second value, and so on. Printing multiple values in one call to println! would look like this:

let x = 5;
let y = 10;

println!("x = {} and y = {}", x, y);


To test the project use cargo run 

-Generating the random number-

To generate this we will use the rand crate 

to do this you must go to the Cargo.toml and add the rand crate under dependencies then build the program using cargo build 

rand = "0.5.5"

You will see this download it then compile rand

Cargo fetches the latest versions of everything from the registry, which is a copy of data from Crates.io. Crates.io is where people in the Rust ecosystem post their open source Rust projects for others to use. similar to npm and shit 

If you immediately run cargo build again without making any changes, you won’t get any output aside from the Finished line. Cargo knows it has already downloaded and compiled the dependencies, and you haven’t changed anything about them in your Cargo.toml file. Cargo also knows that you haven’t changed anything about your code, so it doesn’t recompile that either. With nothing to do, it simply exits.

Cargo eill lock the current state of dependnices when you first run cargo build

To update this you must run the command cargo update which will update the Cargo.lock. file and update the dependencies and alla that stuff 

-Comparing the Guess to the to the secret number-

