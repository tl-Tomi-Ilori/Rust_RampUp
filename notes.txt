Why Use Rust?

Rust is a statically and strongly typed systems programming language. statically means that all types are known at compile-time, strongly means that these types are designed to make it harder to write incorrect programs.

The big difference from C and C++ is that Rust is safe by default; all memory accesses are checked. It is not possible to corrupt memory by accident.

The unifying principles behind Rust are:

strictly enforcing safe borrowing of data
functions, methods and closures to operate on data
tuples, structs and enums to aggregate data
pattern matching to select and destructure data
traits to define behaviour on data

=-Setup-=

First you need to install rust it is ideal to have homebrew installed to tun the brew, to do this open the terminal and run the following commands

in the terminal run the following : brew install rustup

After you run this command you can install the compiler and package manager

rustup-init

**When you run this command select option 1***

To verify the installation run the command: rustc —-version

To enable use of rust in vscode we have to use the RLS (rust language server)

download the rust extension this will contain the RLS

you then need to check if you have cargo which is rusts package manager

cargo --version

=-First Project-=

Using rusts package manager we will create a simple hello world Project

to do this cd into the desired folder and run 

cargo new [project_name]

A folder and a file called main.rs should be created 

to run a rust project you must use the following commands **In the folder where the project is**

cargo build
cargo run

=-Anatomy of a rust program-=
fn main() is the first code that runs in every rust program

Important details in hello_world program

1.Rust style is to indent with four spaces, not a tab.
2.using a ! means that you’re calling a macro instead of a normal function.
3.you see the "Hello, world!" string. We pass this string as an argument to println!
4.we end the line with a semicolon (;), which indicates that this expression is over and the next one is ready to begin.

***Compiling and Running Are Separate Steps***

Before running a Rust program, you must compile it using the Rust compiler by entering the rustc command and passing it the name of your source file, like this:

rustc main.rs

if you use ls in the direftory your in you will see 2 files main an main.rs
main is the executable file where main.rs is the file where the source code lies 


=-Cargo-=

Cargo is Rust’s build system and package manager. it hanldes building your code downloading libraries and building them (dependencies)

-Cargo.toml-

This file is in the TOML format which is Cargo’s configuration format.

1. The first line, [package], is a section heading that indicates that the following statements are configuring a package. As we add more information to this file, we’ll add other sections.
2.The next four lines set the configuration information Cargo needs to compile your program: the name, the version, who wrote it, and the edition of Rust to use. Cargo gets your name and email information from your environment, so if that information is not correct, fix the information now and then save the file. 
3.The last line, [dependencies], is the start of a section for you to list any of your project’s dependencies. In Rust, packages of code are referred to as crates. 

**Cargo expects your source files to live inside the src directory. **

The top-level project directory is just for README files, license information, configuration files, and anything else not related to your code.

Running cargo build for the first time also causes Cargo to create a new file at the top level: Cargo.lock. This file keeps track of the exact versions of dependencies in your project

Cargo also provides a command called cargo check. This command quickly checks your code to make sure it compiles but doesn’t produce an executable:

 cargo check is much faster than cargo build, because it skips the step of producing an executable. 


=-Guessing Game-=

set up a new project using the cargo new command